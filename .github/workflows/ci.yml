name: CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  format:
    name: 🎨 Format
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: DoozyX/clang-format-lint-action@v0.13
      with:
        source: 'Source Plugins'
        clangFormatVersion: 13

  build-plugin:
    strategy:
      matrix:
        engine: ["4.27", "5.0"]
    name: 🔌 Build Plugin UE${{ matrix.engine }}
    runs-on: [self-hosted]

    steps:
      - name: 🔪 Prerequisites
        run: pip install junit_xml

      - uses: actions/checkout@v3
        name: 🛒 Checkout
        with:
          lfs: true

      - name: ☝️ Select UE${{ matrix.engine }}
        shell: bash
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            ue4 setroot "/Users/Shared/Epic Games/UE_${{ matrix.engine }}"
          else
            ue4 setroot "C:\UE\UE_${{ matrix.engine }}"
          fi

          just set-engine ${{ matrix.engine }}

      - name: 🔨 Build plugin
        run: |
          cd Plugins/StreamChat
          ue4 build -NoPCH -NoSharedPCH -DisableUnity

      - name: 🧪 Run tests
        run: ue4 test StreamChat -- -nosound -ReportExportPath="$PWD/Saved/Automation/Reports"

      - name: 🏭 Generate JUnit report
        shell: python3 {0}
        run: |
          input = 'Saved/Automation/Reports/index.json'
          output = 'Saved/Automation/Reports/report.xml'

          import json
          from junit_xml import TestSuite, TestCase

          with open(input, encoding='utf-8-sig') as f:
              data = json.load(f)

          cases = []
          for t in data['tests']:
              case = TestCase(
                  name=t['testDisplayName'], classname=t['fullTestPath'], status=t['state'])
              for e in t['entries']:
                  event = e['event']
                  if event['type'] == 'Error':
                      case.add_error_info(message=event['message'], error_type=event['type'],
                                          output=e['filename'] + ", line " + str(e['lineNumber']))
                  elif event['type'] != 'Info':
                      case.add_failure_info(message=event['message'], failure_type=event['type'],
                                            output=e['filename'] + ", line " + str(e['lineNumber']))

              cases.append(case)
          ts = TestSuite(name='StreamChat',
                          test_cases=cases, timestamp=data['reportCreatedOn'])
          print(TestSuite.to_xml_string([ts]))
          with open(output, 'w') as f:
              TestSuite.to_file(f, [ts], prettyprint=False)
      - name: 📤 Upload test report
        uses: actions/upload-artifact@v3
        with:
          path: Saved/Automation/Reports/report.xml
          name: test-report

  report:
    name: 🧪 Publish test results
    needs: build-plugin
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    steps:
      - name: 📥 Download test report
        uses: actions/download-artifact@v3
        with:
          name: test-report
      - name: ⚗️ Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: report.xml

  build-samples:
    strategy:
      fail-fast: false
      matrix:
        platform: [Linux, Mac, "Win64", Android, IOS]
    name: 🤡 Build samples ${{ matrix.platform }}
    runs-on: [self-hosted, 'UE_${{ matrix.platform }}']

    steps:
      - uses: actions/checkout@v3
        name: 🛒 Checkout
        with:
          lfs: true
      - name: ☝️ Select UE5.0
        shell: bash
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            ue4 setroot "/Users/Shared/Epic Games/UE_5.0"
          else
            ue4 setroot "C:\UE\UE_5.0"
          fi

          just set-engine 5.0

      - name: 🔨 Build
        shell: bash
        run: |
          ue4 build -NoPCH -NoSharedPCH -DisableUnity -platform=${{ matrix.platform }} | sed -e 's/.*LogInit: Display: \(.*\): Warning: \(.*\)/::warning title=\1::\2/' -e 's/.*LogInit: Display: \(.*\): Error: \(.*\)/::error title=\1::\2/' -e 's/.*ERROR: \(.*\)/::error::\1/'

      - name: 🧑‍🍳 Cook
        shell: bash
        run: |
          ue4 uat BuildCookRun -project=$PWD/StreamChatSample.uproject -cook -skipstage -targetplatform=${{ matrix.platform }} | sed -e 's/.*LogInit: Display: \(.*\): Warning: \(.*\)/::warning title=\1::\2/' -e 's/.*LogInit: Display: \(.*\): Error: \(.*\)/::error title=\1::\2/' -e 's/.*ERROR: \(.*\)/::error::\1/'
