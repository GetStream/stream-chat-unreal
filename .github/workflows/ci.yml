name: CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  format:
    name: 🎨 Format
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.12
      with:
        source: 'Source Plugins'
        clangFormatVersion: 12

  build:
    name: 🔨 Build
    runs-on: [self-hosted]

    steps:
      - name: 🔪 Prerequisites
        run: pip3 install junit_xml

      - uses: actions/checkout@v2
        name: 🛒 Checkout
        with:
          lfs: true

      - name: 🔨 Build plugin
        run: |
          cd Plugins/StreamChat
          ue4 build -NoPCH -NoSharedPCH -DisableUnity

      - name: 🔨 Build sample projects
        run: ue4 build -NoPCH -NoSharedPCH -DisableUnity

      - name: 🧪 Run tests
        run: ue4 test StreamChat -- -ReportExportPath="$PWD/Saved/Automation/Reports"
        # https://github.com/adamrehn/ue4cli/issues/39
        continue-on-error: true

      - name: 🏭 Generate JUnit report
        shell: python3 {0}
        run: |
          input = 'Saved/Automation/Reports/index.json'
          output = 'Saved/Automation/Reports/report.xml'

          import json
          from junit_xml import TestSuite, TestCase

          with open(input, encoding='utf-8-sig') as f:
              data = json.load(f)

          cases = []
          for t in data['tests']:
              case = TestCase(
                  name=t['testDisplayName'], classname=t['fullTestPath'], status=t['state'])
              for e in t['entries']:
                  event = e['event']
                  if event['type'] == 'Error':
                      case.add_error_info(message=event['message'], error_type=event['type'],
                                          output=e['filename'] + ", line " + str(e['lineNumber']))
                  elif event['type'] != 'Info':
                      case.add_failure_info(message=event['message'], failure_type=event['type'],
                                            output=e['filename'] + ", line " + str(e['lineNumber']))

              cases.append(case)
          ts = TestSuite(name=data['clientDescriptor'],
                          test_cases=cases, timestamp=data['reportCreatedOn'])
          print(TestSuite.to_xml_string([ts]))
          with open(output, 'w') as f:
              TestSuite.to_file(f, [ts], prettyprint=False)

      - name: ⚗️ Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: Saved/Automation/Reports/report.xml
