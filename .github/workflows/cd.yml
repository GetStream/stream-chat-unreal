name: CD

on:
  pull_request:
    types: [closed]
    branches: [ main ]

  workflow_dispatch:
    inputs:
      build-configuration:
        description: 'Unreal Engine build configuration'
        required: false
        default: Shipping
        options:
          - Debug
          - DebugGame
          - Development
          - Shipping
          - Test

jobs:
  samples:
    strategy:
      fail-fast: false
      matrix:
        platform: [Linux, Mac, "Win64"]
        what: [team-chat, jumpy-lion]
        include: 
          - what: team-chat
            map: /Game/TeamChatSample/Maps/TeamChatSample.TeamChatSample
          - what: jumpy-lion
            map: /Game/JumpyLion/Maps/JumpyLion.JumpyLion
          - platform: Linux
            path: LinuxNoEditor
          - platform: Mac
            path: MacNoEditor
          - platform: Win64
            path: WindowsNoEditor
            
    name: üì¶ Package ${{ matrix.what }} - ${{ matrix.platform }}
    runs-on: [self-hosted, 'UE_${{ matrix.platform }}']

    steps:
      - uses: actions/checkout@v2
        name: üõí Checkout
        with:
          lfs: true

      - name: üì¶ Package
        shell: bash
        env:
          # Fix mingw trying to be smart and converting paths https://github.com/moby/moby/issues/24029#issuecomment-250412919
          MSYS_NO_PATHCONV: 1
        run: |
          # Set startup map
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's|/Engine/Maps/Entry.Entry|${{ matrix.map }}|' Config/DefaultEngine.ini
          else
            sed -i 's|/Engine/Maps/Entry.Entry|${{ matrix.map }}|' Config/DefaultEngine.ini
          fi

          build_config=${{ github.event.inputs.build-configuration }}
          if [ -z ${buil_config+x} ]; then build_config=Shipping; fi
          ue4 package $build_config -platform=${{ matrix.platform }} -mapstocook=${{ matrix.map }} |
            sed 's/.*LogInit: Display: \(.*\): Warning: \(.*\)/::warning title=\1::\2/'
            sed 's/.*LogInit: Display: \(.*\): Error: \(.*\)/::error title=\1::\2/'
            sed 's/.*ERROR: \(.*\)/::error::\1/'
        
      - name: üîè Codesign executable
        if: ${{ matrix.platform == 'Mac' }}
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_IDENTITY_ID: ${{ secrets.MACOS_IDENTITY_ID }}
        run: |
          build_config=${{ github.event.inputs.build-configuration }}
          if [ -z ${buil_config+x} ]; then build_config=Shipping; fi
          echo "Rename to ${{ matrix.what }}.app"
          mv dist/${{ matrix.path }}/StreamChatSample-${{ matrix.platform }}-$build_config.app ${{ matrix.what }}.app

          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security delete-keychain build.keychain
          security create-keychain -p qwerty build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p qwerty build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k qwerty build.keychain
          security list-keychains -s `security list-keychains | xargs` build.keychain

          codesign --force --options runtime -s $MACOS_IDENTITY_ID -v ${{ matrix.what }}.app 
          codesign --force --options runtime -s $MACOS_IDENTITY_ID -v ${{ matrix.what }}.app/Contents/Resources/RadioEffectUnit.component/Contents/MacOS/RadioEffectUnit
          codesign --force --options runtime -s $MACOS_IDENTITY_ID -v ${{ matrix.what }}.app/Contents/UE4/Engine/Build/Mac/RadioEffectUnit/RadioEffectUnit.component/Contents/MacOS/RadioEffectUnit
          find jumpy-lion.app -type f -name '*.dylib' -exec codesign --force --options runtime -s $MACOS_IDENTITY_ID -v {} \;

      - name: Notarize
        if: ${{ matrix.platform == 'Mac' }}
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: "${{ matrix.what }}.app"
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: Staple
        if: ${{ matrix.platform == 'Mac' }}
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: "${{ matrix.what }}.app"

      - name: Package
        if: ${{ matrix.platform == 'Mac' }}
        run: ditto -V -c -k --sequesterRsrc --keepParent "${{ matrix.what }}.app" "${{ matrix.what }}-${{ matrix.platform }}.zip"

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.platform == 'Mac' }}
        with:
          name: ${{ matrix.what }}-${{ matrix.platform }}
          path: |
            ${{ matrix.what }}-${{ matrix.platform }}.zip
        name: üìÅ Upload artifact
     
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.platform != 'Mac' }}
        with:
          name: ${{ matrix.what }}-${{ matrix.platform }}
          path: |
            dist/${{ matrix.path }}
            !**/Manifest_NonUFSFiles*.txt
        name: üìÅ Upload artifact

  plugin:
    name: üîå Package plugin
    runs-on: [self-hosted]

    steps:
      - uses: actions/checkout@v2
        name: üõí Checkout
        with:
          lfs: true

      - name: üì¶ Package plugin
        run: |
          cd Plugins/StreamChat
          ue4 package

      # Satisfy marketplace requirements
      - name: ü•´ Move SourceFiles
        shell: bash
        run: |
          mkdir Plugins/StreamChat/dist/Content/SourceFiles
          find Plugins/StreamChat/dist -type f '(' -name "*.png" -o -name "*.svg" ')' -exec mv -i {} Plugins/StreamChat/dist/Content/SourceFiles \;

      - uses: actions/upload-artifact@v2
        with:
          name: StreamChat
          path: |
            Plugins/StreamChat/dist
            !**/Binaries
            !**/Intermediate
        name: üìÅ Upload plugin artifact

  release:
    name: üöÄ Release
    if: startsWith(github.head_ref, 'release-') || startsWith(github.ref_name, 'release-')
    needs: [samples, plugin]
    runs-on: ubuntu-latest

    steps:
      - name: üîé Determine version
        uses: actions/github-script@v5
        with:
          script: |
            // Getting the release version from the PR source branch
            // Source branch looks like this: release-1.0.0
            const ref = context.payload.pull_request ? context.payload.pull_request.head.ref : context.ref;
            const version = ref.split('-')[1];
            console.log("Detected version " + version);
            core.exportVariable('VERSION', version);

      - name: üì• Download
        uses: actions/download-artifact@v2
      
      - name: üìá Zip
        run: |
          # move macOS tars
          mv **/*.tar .
          # delete empty directories
          find . -type d -empty -delete
          # zip rest of directories
          for i in */; do
            zip -r "${i%/}.zip" "$i"
          done

      - name: üöÄ Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          draft: true
          tag: v${{ env.VERSION }}
          artifacts: "*.zip,*.tar"
          token: ${{ secrets.GITHUB_TOKEN }}
