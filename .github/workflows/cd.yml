name: CD

on:
  pull_request:
    types: [closed]
    branches: [ main ]

  workflow_dispatch:
    inputs:
      build-configuration:
        description: 'Unreal Engine build configuration'
        required: false
        default: Shipping
        options:
          - Debug
          - DebugGame
          - Development
          - Shipping
          - Test
      force-release:
        description: 'Force release with version'
        required: false
        default: ''
        type: string

jobs:
  samples:
    strategy:
      fail-fast: false
      matrix:
        platform: [Linux, Mac, "Win64", Android, IOS]
        what: [team-chat, jumpy-lion]
        exclude:
          # exclude Jumpy Lion on mobile
          - platform: Android
            what: jumpy-lion
          - platform: IOS
            what: jumpy-lion
        include:
          - what: team-chat
            map: /Game/TeamChatSample/Maps/TeamChatSample.TeamChatSample
          - what: jumpy-lion
            map: /Game/JumpyLion/Maps/JumpyLion.JumpyLion
          - platform: Linux
            path: LinuxNoEditor
          - platform: Mac
            path: MacNoEditor
          - platform: Win64
            path: WindowsNoEditor
          - platform: Android
            path: Android
          - platform: IOS
            path: IOS


    name: 📦 Package ${{ matrix.what }} - ${{ matrix.platform }}
    runs-on: [self-hosted, 'UE_${{ matrix.platform }}']

    steps:
      - uses: actions/checkout@v2
        name: 🛒 Checkout
        with:
          lfs: true

      - name: Generate bundle version
        if: ${{ matrix.platform == 'IOS' }}
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const fileName = './Plugins/StreamChat/StreamChat.uplugin';
            const data = fs.readFileSync(fileName);
            const file = JSON.parse(data);
            const bundleVersion = `0.${file.Version + 11}`;
            fs.mkdirSync('./Build/IOS', { recursive: true });
            fs.writeFileSync('./Build/IOS/StreamChatSample.PackageVersionCounter', bundleVersion);
            console.log(`Generated bundle version ${bundleVersion}`);

      - name: Install iOS certificate and provisioning profile
        if: ${{ matrix.platform == 'IOS' }}
        env:
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          IOS_PROVISION_PROFILE: ${{ secrets.IOS_PROVISION_PROFILE }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$IOS_CERTIFICATE" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$IOS_PROVISION_PROFILE" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p qwerty $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p qwerty $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MACOS_CERTIFICATE_PWD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: 📦 Package
        shell: bash
        env:
          # Fix mingw trying to be smart and converting paths https://github.com/moby/moby/issues/24029#issuecomment-250412919
          MSYS_NO_PATHCONV: 1
        run: |
          # Set startup map
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' 's|/Engine/Maps/Entry.Entry|${{ matrix.map }}|' Config/DefaultEngine.ini
          else
            sed -i 's|/Engine/Maps/Entry.Entry|${{ matrix.map }}|' Config/DefaultEngine.ini
          fi

          build_config=${{ github.event.inputs.build-configuration }}
          if [ -z ${build_config+x} ]; then build_config=Shipping; fi

          # -package needed to create ipa/apk
          # -distribution needed to use non-dev certificate

          if [ "${{ matrix.platform == 'IOS' }}" = true ] ; then
            MAYBE_DISTRIBUTION=-distribution
          fi

          ue4 package $build_config -package $MAYBE_DISTRIBUTION -platform=${{ matrix.platform }} -mapstocook=${{ matrix.map }} |
            sed 's/.*LogInit: Display: \(.*\): Warning: \(.*\)/::warning title=\1::\2/'
            sed 's/.*LogInit: Display: \(.*\): Error: \(.*\)/::error title=\1::\2/'
            sed 's/.*ERROR: \(.*\)/::error::\1/'

      - name: 🔏 Codesign executable
        if: ${{ matrix.platform == 'Mac' }}
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_IDENTITY_ID: ${{ secrets.MACOS_IDENTITY_ID }}
        run: |
          build_config=${{ github.event.inputs.build-configuration }}
          if [ -z "${build_config}" ]; then build_config=Shipping; fi
          echo Using build configuration: $build_config

          app=${{ matrix.what }}.app
          executable=StreamChatSample-${{ matrix.platform }}-$build_config
          echo -e "\n==> Rename to $app"
          mv dist/${{ matrix.path }}/$executable.app $app

          echo -e "\n==> Set up cert"
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$MACOS_CERTIFICATE" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p qwerty $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p qwerty $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MACOS_CERTIFICATE_PWD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          echo -e "\n==> Remove RadioEffectComponent"
          rm -rf $app/Contents/Resources/RadioEffectUnit.component
          rm -rf $app/Contents/UE4/Engine/Build

          find $app -name '*.dylib' -print0 | while IFS= read -r -d '' i; do
            if otool -l "$i" | grep -q LC_RPATH; then
              echo "--> Replace rpath for $i"
              install_name_tool -rpath /Volumes/Work/Perforce/UE4/Engine/Binaries/ThirdParty/PhysX3/Mac @loader_path $i
            fi
          done

          echo -e "\n==> codesign all dylibs"
          find $app -type f -name '*.dylib' -exec codesign --timestamp --force -s $MACOS_IDENTITY_ID -v {} \;
          echo " --> codesign with hardened runtime for the main executable + entitlements"
          # for this we need an entitlements which reduce the strictness a little
          codesign --timestamp --force --options runtime --entitlements Build/Mac/entitlements.plist -s $MACOS_IDENTITY_ID -v $app

      - name: Notarize
        if: ${{ matrix.platform == 'Mac' }}
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: "${{ matrix.what }}.app"
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: Staple
        if: ${{ matrix.platform == 'Mac' }}
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: "${{ matrix.what }}.app"

      - name: Package
        if: ${{ matrix.platform == 'Mac' }}
        run: ditto -V -c -k --sequesterRsrc --keepParent "${{ matrix.what }}.app" "${{ matrix.what }}-${{ matrix.platform }}.zip"

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.platform == 'Mac' }}
        with:
          name: ${{ matrix.what }}-${{ matrix.platform }}
          path: |
            ${{ matrix.what }}-${{ matrix.platform }}.zip
        name: 📁 Upload artifact

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.platform != 'Mac' }}
        with:
          name: ${{ matrix.what }}-${{ matrix.platform }}
          path: |
            dist/${{ matrix.path }}
            !**/Manifest_NonUFSFiles*.txt
        name: 📁 Upload artifact

  plugin:
    name: 🔌 Package plugin
    runs-on: [self-hosted, UE_IOS]

    steps:
      - uses: actions/checkout@v2
        name: 🛒 Checkout
        with:
          lfs: true

      - name: 📦 Package plugin
        run: |
          cd Plugins/StreamChat
          ue4 package

      # Satisfy marketplace requirements
      - name: 🥫 Move SourceFiles
        shell: bash
        run: |
          mkdir Plugins/StreamChat/dist/Content/SourceFiles
          find Plugins/StreamChat/dist -type f '(' -name "*.png" -o -name "*.svg" ')' -exec mv -i {} Plugins/StreamChat/dist/Content/SourceFiles \;

      - uses: actions/upload-artifact@v2
        with:
          name: StreamChat
          path: |
            Plugins/StreamChat/dist
            !**/Binaries
            !**/Intermediate
        name: 📁 Upload plugin artifact

  release:
    name: 🚀 Release
    if: ${{ startsWith(github.head_ref, 'release-') || startsWith(github.ref_name, 'release-') || github.event.inputs.force-release != '' }}
    needs: [samples, plugin]
    runs-on: [self-hosted, UE_Mac]

    steps:
      - name: 🔎 Determine version
        uses: actions/github-script@v5
        with:
          script: |
            // Getting the release version from the PR source branch
            // Source branch looks like this: release-1.0.0
            let version = "${{ github.event.inputs.force-release }}";
            if (!version) {
              const ref = context.payload.pull_request ? context.payload.pull_request.head.ref : context.ref;
              version = ref.split('-')[1];
            }
            console.log("Detected version " + version);
            core.exportVariable('VERSION', version);

            const convertVersionToInt32 = function (version) {
              // Split a given version string into three parts.
              let parts = version.split(".");
              // Check if we got exactly three parts, otherwise throw an error.
              if (parts.length !== 3) {
                throw new Error("Received invalid version string");
              }
              // Make sure that no part is larger than 1023 or else it
              // won't fit into a 32-bit integer.
              parts.forEach((part) => {
                if (part >= 1024) {
                  throw new Error(`Version string invalid, ${part} is too large`);
                }
              });
              // Let's create a new number which we will return later on
              let numericVersion = 0;
              // Shift all parts either 0, 10 or 20 bits to the left.
              for (let i = 2; i >= 0; i--) {
                numericVersion |= parts[2 - i] << (i * 10);
              }
              return numericVersion;
            };

            const intVersion = convertVersionToInt32(version);
            const bundleVersion = `0.${intVersion}`;
            console.log("Generated iOS bundle version " + bundleVersion);

      - name: 📥 Download
        uses: actions/download-artifact@v2

      - name: 📇 Zip
        run: |
          # move iOS IPA
          find . -type f -name "*.ipa" -exec mv -i {} ./team-chat.ipa \;
          # move macOS zips
          find . -type f -name "*.zip" -exec mv -i {} . \;
          # delete empty directories
          find . -type d -empty -delete
          # zip rest of directories
          for i in */; do
            zip -r "${i%/}.zip" "$i"
          done

      - name: 🚀 Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          draft: true
          tag: v${{ env.VERSION }}
          artifacts: "*.zip"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Upload iOS app to TestFlight'
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: './team-chat.ipa'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
